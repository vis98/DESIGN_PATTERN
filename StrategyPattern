//strategy pattern comes into picture when mulltiple subclass have extended parent and provide their own implementation which might be similar sometimes
// eg class A is parent B ,C and D are child and lets say methodB overided by B,C,D to provide own implementation and somehow B and D have similar functionality in their own 
//implementation so we can create interface and provide diff classes which can be used by subclass using has a relation.

public class StrategyPattern{
    public static void main(String args[]){
        Vehicle v=new PassengerVehicle();
        v.drive();
    }
}

interface DriveStrategy{
    public void drive();
}

class NormalDrive implements DriveStrategy{
    public void drive(){
        System.out.println("Normal Drive Strategy");
    }
}

class offRoadDrive implements DriveStrategy{
    public void drive(){
        System.out.println("off Roading Drive Strategy");
    }
}

 class Vehicle{
    DriveStrategy  drivestrategy;
    Vehicle(DriveStrategy obj){
        this.drivestrategy=obj;
    }
    public void drive(){
         drivestrategy.drive();
    }
}

class PassengerVehicle extends Vehicle{
    PassengerVehicle(){
        super(new NormalDrive());
    }
}

class SportsVehicle extends Vehicle{

    SportsVehicle(){
        super(new offRoadDrive());
    }
}



