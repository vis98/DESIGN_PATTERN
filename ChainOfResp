abstract class AbstractLogger{
    public static int INFO = 1;
    public static int DEBUG = 2;
    public static int ERROR = 3;
 
    protected int level;


    protected AbstractLogger nextLogger;
    public void setNextLogger(AbstractLogger nextLogger){
        this.nextLogger = nextLogger;
     }

     
   public void logMessage(int level, String message){
    if(this.level <= level){
       write(message);
    }
    if(nextLogger !=null){
       nextLogger.logMessage(level, message);
    }
 }
 abstract protected void write(String message);

}

 class ConsoleLogger extends AbstractLogger {

    public ConsoleLogger(int level){
       this.level = level;
    }
 
    @Override
    protected void write(String message) {		
       System.out.println("Standard Console::Logger: " + message);
    }
 }

 class ErrorLogger extends AbstractLogger {

    public ErrorLogger(int level){
       this.level = level;
    }
 
    @Override
    protected void write(String message) {		
       System.out.println("Error Console::Logger: " + message);
    }
 }
 class FileLogger extends AbstractLogger {

    public FileLogger(int level){
       this.level = level;
    }
 
    @Override
    protected void write(String message) {		
       System.out.println("File::Logger: " + message);
    }
 }

public class ChainOfResp {
    public static void main(String[] args) {
       AbstractLogger errorLogger=new ErrorLogger(AbstractLogger.ERROR);
       AbstractLogger filelogger=new FileLogger(AbstractLogger.DEBUG);
       AbstractLogger stdlogger=new ErrorLogger(AbstractLogger.INFO);
       errorLogger.setNextLogger(filelogger);
       filelogger.setNextLogger(stdlogger);

       filelogger.logMessage(AbstractLogger.ERROR, "Error is from");

 
    }
}
